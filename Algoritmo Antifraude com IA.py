# -*- coding: utf-8 -*-
"""C√≥pia de Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1imvYRh-Nh7RdQ9L3DVleq8t-5APXEo0v
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score
import matplotlib.pyplot as plt
import seaborn as sns

import pandas as pd

# Carregar o arquivo CSV (ap√≥s upload via Colab)
df = pd.read_csv('creditcard.csv')

# Verificar se foi carregado corretamente
df.head()  # exibe as 5 primeiras linhas da tabela

# Dimens√£o do dataset: linhas e colunas
print("Formato:", df.shape)

# Verificar os tipos de transa√ß√µes (fraude ou n√£o)
print("\nDistribui√ß√£o de fraudes:")
print(df['Class'].value_counts())
print("\nDistribui√ß√£o percentual:")
print(df['Class'].value_counts(normalize=True))

# Estat√≠sticas b√°sicas das vari√°veis
df.describe()

from sklearn.model_selection import train_test_split

# Separar features (X) e target (y)
X = df.drop('Class', axis=1)  # Todas as colunas exceto 'Class'
y = df['Class']               # Coluna alvo: 0 ou 1

# Dividir em treino (70%) e teste (30%)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, stratify=y, random_state=42
)

# Mostrar tamanhos dos conjuntos
print("Treino:", X_train.shape)
print("Teste :", X_test.shape)

df_sample = df.sample(frac=0.1, random_state=42)  # usa 10% dos dados
X = df_sample.drop('Class', axis=1)
y = df_sample['Class']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, stratify=y, random_state=42
)

print("Treino:", X_train.shape)
print("Teste :", X_test.shape)

from sklearn.ensemble import RandomForestClassifier

# Modelo com balanceamento para tratar o desn√≠vel entre classes
model = RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42)
model.fit(X_train, y_train)

print("Modelo treinado com sucesso!")

from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score

# Fazer previs√µes
y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:, 1]

# Matriz de confus√£o
print("üî∑ Matriz de Confus√£o:")
print(confusion_matrix(y_test, y_pred))

# Relat√≥rio de classifica√ß√£o
print("\nüî∑ M√©tricas de Classifica√ß√£o:")
print(classification_report(y_test, y_pred, digits=4))

# ROC-AUC
print("\nüî∑ Score ROC-AUC:", round(roc_auc_score(y_test, y_proba), 4))

from imblearn.over_sampling import SMOTE

smote = SMOTE(random_state=42)
X_res, y_res = smote.fit_resample(X_train, y_train)

print("Ap√≥s SMOTE:", y_res.value_counts())

from imblearn.under_sampling import RandomUnderSampler

under = RandomUnderSampler(random_state=42)
X_res, y_res = under.fit_resample(X_train, y_train)

!pip install xgboost lightgbm

import xgboost as xgb

xgb_model = xgb.XGBClassifier(use_label_encoder=False, eval_metric='logloss')
xgb_model.fit(X_res, y_res)

import lightgbm as lgb

lgb_model = lgb.LGBMClassifier()
lgb_model.fit(X_res, y_res)

!pip install shap
import shap

explainer = shap.TreeExplainer(xgb_model)
shap_values = explainer.shap_values(X_test)

shap.summary_plot(shap_values, X_test, plot_type="bar")

pip install streamlit

import streamlit as st
import pandas as pd
import joblib

# Carregar modelo treinado
model = joblib.load('modelo.pkl')

st.title("Detector de Fraude üí≥")
amount = st.number_input("Valor da Transa√ß√£o")
v1 = st.slider("V1", -30.0, 30.0, 0.0)
# ... outros sliders para V2, V3, ..., V28

# Prever
input_data = pd.DataFrame([[amount, v1, ...]], columns=X.columns)
prediction = model.predict(input_data)

if prediction[0] == 1:
    st.error("üö® FRAUDE DETECTADA!")
else:
    st.success("‚úÖ Transa√ß√£o leg√≠tima.")

import joblib

# Salvar o modelo treinado no arquivo
joblib.dump(model, 'modelo.pkl')

import os
print(os.listdir())  # Verifica se 'modelo.pkl' est√° na pasta

from google.colab import files

files.download('modelo.pkl')